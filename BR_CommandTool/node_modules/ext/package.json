{
  "name": "ext",
  "description": "High quality core extensions",
  "version": "0.6.1",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "directories": {
    "lib": "./lib/ext"
  },
  "readme": "\n# ext.js - JavaScript Extensions &amp; Utilities\n\nHigh quality JavaScript extensions for various tasks such as\nformatting dates, currency helpers, and more. This library targets node.js and\nserver-side frameworks such as [Express](http://github.com/visionmedia/express).\n\nExt.js uses the CommonJS module pattern when needed.\nAdditionally, **all** of the native object extensions are _non-enumerable_,\nand you may create your own via `require('ext').extend(prototype, methods).\n\n## Installation\n\n    $ npm install ext\n\n## Extensions\n\nTo use simply:\n    require('ext');\n\n### Object\n\n  * Object.values(obj)\n  * Object.merge(a, b)\n  * Object.mergeDeep(a, b)\n\n### Array\n\n  * Array#each(fn[, context])\n  * Array#excludes(item[, item, ...])\n  * Array#includes(item[, item, ...])\n  * Array#clear\n  * Array#flattened\n  * Array#first\n  * Array#last\n  * Array#sample\n  * Array#compact([removableValues])\n  * Array#at(index)\n  * Array#drop(n)\n  * Array#take(n)\n  * Array#grep(pattern)\n  * Array#remove(obj[, fn[, context]])\n  * Array#transposed\n  * Array#isEmpty\n  * Array#reject(fn[, context])\n  * Array#none(fn[, context])\n  * Array#find(fn[, context])\n  * Array#each() alias of #forEach()\n  * Array#select() alias of #filter()\n  * Array#find() alias of #every()\n  * Array#any() alias of #some()\n\n#### Collection Operators\n\n  * Array#sum\n  * Array#avg\n  * Array#min\n  * Array#max\n\n### Number\n\n  * Number#ordinalize\n  * Number#currency\n  * Number#second     / Number#seconds\n  * Number#minute     / Number#minutes\n  * Number#hour       / Number#hours\n  * Number#day        / Number#days\n  * Number#week       / Number#weeks\n  * Number#month      / Number#months\n  * Number#year       / Number#years\n  * Number#toSeconds\n  * Number#toMinutes\n  * Number#toHours\n  * Number#toDays\n  * Number#toWeeks\n  * Number#toMonths\n  * Number#toYears\n  * Number#byte       / Number#bytes\n  * Number#kilobyte   / Number#kilobytes\n  * Number#megabyte   / Number#megabytes\n  * Number#gigabyte   / Number#gigabytes\n  * Number#ago\n  * Number#times(fn[, context])\n  * Number#isFloat\n  * Number#hex\n  * Number#octal\n\n### String\n\n  * String#variable\n  * String#uppercase\n  * String#lowercase\n  * String#camelcase\n  * String#digits\n  * String#strip\n  * String#drop(n)\n  * String#take(n)\n  * String#before(str)\n  * String#after(str)\n  * String#padLeft(width[, char])\n  * String#padRight(width[, char])\n  * String#remove(pattern)\n  * String#startsWith(str)\n  * String#endsWith(str)\n  * String#capitalize([all])\n  * String#wrap(prefix[, suffix])\n  * String#singular\n  * String#plural\n  * String#isPlural\n  * String#isSingular\n  * String#includes(str)\n  * String#count(str)\n\n### Date\n\n  * Date#year\n  * Date#month\n  * Date#date\n  * Date#day\n  * Date#hours\n  * Date#minutes\n  * Date#seconds\n  * Date#milliseconds\n  * Date#monthName\n  * Date#shortMonthName\n  * Date#dayName\n  * Date#shortDayName\n  * Date#format(str)\n  * Date#inWordsSince(date)\n  * Date#inWordsSinceNow\n  * Date#parse(str)\n  * parse(str[, date])\n\n### RegExp\n\n  * RegExp.escape(str[, chars])\n\n### Function\n\n  * Function#bind(context[, ...])\n  * Function#curry(...)\n\n### Base64\n\n  * String#base64Encoded / encode(str)\n  * String#base64Decoded / decode(str)\n\n### Error\n\n  * Error.raise([name[, message[, object]]])\n\n## MD5\n\n  * String#md5 / hash(str)\n\n### printf\n\n  * sprintf(str[, arg[, ...]])\n  * eprintf(str[, arg[, ...]])\n  * printf(str[, arg[, ...]])\n\n## Date Parsing\n\nThe module _ext/date_ exports the **parse()** function which accepts\na _string_ to parse, as well as an optional _date_ which represents \"now\".\n\nBelow are some examples:\n\n    new Date\n    // => Fri, 26 Feb 2010 19:16:47 GMT\n\n    parse('today')\n    // => Fri, 26 Feb 2010 19:16:47 GMT\n\n    parse('yesterday')\n    // => Thu, 25 Feb 2010 19:16:47 GMT\n\n    parse('in 5 hours')\n    // => Sat, 27 Feb 2010 00:16:47 GMT\n\n    parse('in 2 days')\n    // => Sun, 28 Feb 2010 19:16:47 GMT\n\n    parse('next tuesday')\n    // => Tue, 02 Mar 2010 19:16:47 GMT\n\nMore examples:\n\n    'in a year'\n    'in one year'\n    'in five days'\n    'in three hundred minutes'\n    'in fifty two minutes'\n    'in seventy five trillion seconds'\n    'in five and a half minutes'\n\n## Running Tests\n\n    $ make test\n\n## Contributors\n\n  * TJ Holowaychuk (visionmedia)\n  * Tobias Svensson (tobiassvn)\n  \n### Style Guide\n\nThese guidlines must be met before commit(s) or patches \nwill be accepted.\n\n  * Use 2 space indents\n  * No trailing whitespace\n  * Blank line before EOF\n  * Omit semi-colons unless required (very rarely is this needed)\n  * Never bump the version\n  \nFile comments should take the following form:\n\n    // ext.js - <category> [- subcategory ...] - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)\n\nMethod comments should take the following form, and\n<type>'s should be lowercase. _\"mixed\"_ should be used\nwhen multiple types are acceptable, **not** _\"object\"_.\n\nWhen accepting an _options_ object for example, you\nmay use _\"hash\"_ as this indicates that common usage\nof this parameter is to pass a literal object using\nbrace syntax.\n\nAll examples should be indented 2 spaces.\n\n    /**\n     * <description>\n     *\n     *  <example ...>\n     *\n     * @param  {<type>} <name>\n     * @param  {<type>} <name>\n     * @param  {<type>} <name>\n     * @return {<type>}\n     * @api <public|private|protected>\n     */\n\nNo trailing whitespace after hash keys:\n\n    { foo: 'bar' }\n    // good\n    \n    { foo : 'bar' }\n    // bad\n    \nHash whitespace:\n\n    { foo: 'bar', baz: 'raz' }\n    // good\n    \n    {foo:'bar', baz: 'raz'}\n    // bad\n    \n    {\n      foo: 'bar',\n      baz: 'raz'\n    }\n    // good\n    \nChained methods should be indented to indicate context:\n\n    str\n      .strip\n      .replace(...)\n      .replace(...)\n    // good\n    \n    str\n    .strip\n    .replace(...)\n    .replace(...)\n    // bad\n    \n    str.\n      strip.\n      replace(...).\n      replace(...)\n    // bad\n    \nUse single quoted strings when possible:\n\n    'yay'\n    // good\n    \n    \"he said 'yay'\"\n    // good\n    \n    \"yay\"\n    // bad\n\nLarge ternary conditional should take the following form:\n\n    foo = some.largeProperty === undefined\n      ? 'some large value'\n      : some.largeProperty + 'whatever'\n    \nConditionals should be functional when possible (I hate braces):\n\n    if (foo)\n      bar(),\n      baz()\n    else\n      if (somethingElse)\n        whateves()\n    // goood\n    \n    if (foo) {\n      bar()\n      baz()\n    }\n    else {\n      if (somethingElse) {\n        whateves()\n      }\n    }\n    // bad\n    \nClosures:\n\n    function(){\n      \n    }\n    // good\n    \n    function () {\n      \n    }\n    // bad\n    \nMethods:\n\n    foo.bar = function() {\n      \n    }\n    // good\n    \n    foo.bar = function (){\n      \n    }\n    // bad \n  \n\n## License\n\n(The MIT License)\n\nCopyright (c) 2009 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "Readme.md",
  "_id": "ext@0.6.1",
  "_from": "ext@"
}
